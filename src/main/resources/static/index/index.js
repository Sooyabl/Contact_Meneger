document.addEventListener("DOMContentLoaded", function () {
    document.querySelector("#contactForm").addEventListener("submit", async function (event) {
        event.preventDefault(); // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—é —Å—Ç–æ—Ä—ñ–Ω–∫–∏

        const name = document.querySelector("#name").value;
        const phone = document.querySelector("#phone").value;
        const email = document.querySelector("#email").value;

        if (!name || !phone || !email) {
            alert("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è!");
            return;
        }

        const contact = { name, phone, email };

        try {
            const response = await fetch("http://localhost:8080/api/contacts", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(contact)
            });

            if (response.ok) {
                alert("–ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–¥–∞–Ω–æ!");
                document.querySelector("#contactForm").reset(); // –û—á–∏—â–∞—î–º–æ —Ñ–æ—Ä–º—É
                fetchContacts(); // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
            } else {
                alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—É!");
            }
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞:", error);
            alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑'—î–¥–Ω–∞—Ç–∏—Å—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º.");
        }
    });

    fetchContacts(); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
});


async function fetchContacts() {
    const response = await fetch("http://localhost:8080/api/contacts");
    const contacts = await response.json();
    const tableBody = document.querySelector("#contactsTable tbody");
    tableBody.innerHTML = "";

    contacts.forEach(contact => {
        const row = document.createElement("tr");
        row.innerHTML = `
            <td>${contact.name}</td>
            <td>${contact.phone}</td>
            <td>${contact.email}</td>
            <td>
                <button onclick="editContact(${contact.id})">‚úèÔ∏è</button>
                <button onclick="deleteContact(${contact.id})">üóëÔ∏è</button>
            </td>
        `;
        tableBody.appendChild(row);
    });
}

async function deleteContact(id) {
    if (!confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç?")) return;

    const response = await fetch(`http://localhost:8080/api/contacts/${id}`, {
        method: "DELETE"
    });

    if (response.ok) {
        fetchContacts(); // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    } else {
        alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç");
    }
}

async function editContact(id) {
    const name = prompt("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è:");
    const phone = prompt("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω:");
    const email = prompt("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π email:");

    if (!name || !phone || !email) {
        alert("–£—Å—ñ –ø–æ–ª—è –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ!");
        return;
    }

    const updatedContact = { name, phone, email };

    try {
        const response = await fetch(`http://localhost:8080/api/contacts/${id}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(updatedContact)
        });

        if (response.ok) {
            alert("–ö–æ–Ω—Ç–∞–∫—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ!");
            fetchContacts(); // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
        } else {
            alert("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—É!");
        }
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞:", error);
        alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑'—î–¥–Ω–∞—Ç–∏—Å—è –∑ —Å–µ—Ä–≤–µ—Ä–æ–º.");
    }
}
